/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiBaseService } from '../api-base-service';
import { ApiConfiguration } from '../api-configuration';
import { ApiStrictHttpResponse } from '../api-strict-http-response';

import { authSignIn } from '../fn/users/auth-sign-in';
import { AuthSignIn$Params } from '../fn/users/auth-sign-in';
import { authSignOut } from '../fn/users/auth-sign-out';
import { AuthSignOut$Params } from '../fn/users/auth-sign-out';
import { getCurrentUser } from '../fn/users/get-current-user';
import { GetCurrentUser$Params } from '../fn/users/get-current-user';
import { getUser } from '../fn/users/get-user';
import { GetUser$Params } from '../fn/users/get-user';
import { registerUser } from '../fn/users/register-user';
import { RegisterUser$Params } from '../fn/users/register-user';
import { UserResponse } from '../models/user-response';

@Injectable({ providedIn: 'root' })
export class UsersApiService extends ApiBaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `registerUser()` */
  static readonly RegisterUserPath = '/api/users/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerUser()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  registerUser$Response(params: RegisterUser$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<void>> {
    return registerUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerUser$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  registerUser(params: RegisterUser$Params, context?: HttpContext): Observable<void> {
    return this.registerUser$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authSignIn()` */
  static readonly AuthSignInPath = '/api/users/signin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authSignIn()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authSignIn$Response(params: AuthSignIn$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<void>> {
    return authSignIn(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authSignIn$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  authSignIn(params: AuthSignIn$Params, context?: HttpContext): Observable<void> {
    return this.authSignIn$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authSignOut()` */
  static readonly AuthSignOutPath = '/api/users/signout';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authSignOut()` instead.
   *
   * This method doesn't expect any request body.
   */
  authSignOut$Response(params?: AuthSignOut$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<void>> {
    return authSignOut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authSignOut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authSignOut(params?: AuthSignOut$Params, context?: HttpContext): Observable<void> {
    return this.authSignOut$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getUser()` */
  static readonly GetUserPath = '/api/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser$Response(params: GetUser$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<UserResponse>> {
    return getUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUser(params: GetUser$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getUser$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `getCurrentUser()` */
  static readonly GetCurrentUserPath = '/api/users/current';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUser$Response(params?: GetCurrentUser$Params, context?: HttpContext): Observable<ApiStrictHttpResponse<UserResponse>> {
    return getCurrentUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUser(params?: GetCurrentUser$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getCurrentUser$Response(params, context).pipe(
      map((r: ApiStrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

}
