// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Models;

#nullable disable

namespace TaskManager.Migrations
{
    [DbContext(typeof(TaskManagerDbContext))]
    [Migration("20250618142030_TaskEntity")]
    partial class TaskEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.17");

            modelBuilder.Entity("TaskManager.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("task_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_login");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserLogin");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("TaskManager.Models.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("ActualTimeSpent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("actual_time_spent");

                    b.Property<DateTimeOffset?>("CompleteDate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("complete_date");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("PlannedCompletionDate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("planned_completion_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_login");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserLogin");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("TaskManager.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("TEXT")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Login");

                    b.HasIndex("Login");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TaskManager.Models.Comment", b =>
                {
                    b.HasOne("TaskManager.Models.TaskEntity", null)
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManager.Models.TaskEntity", b =>
                {
                    b.HasOne("TaskManager.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManager.Models.User", b =>
                {
                    b.OwnsOne("TaskManager.Models.PasswordHash", "Password", b1 =>
                        {
                            b1.Property<string>("UserLogin")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("password_hash");

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("password_salt");

                            b1.HasKey("UserLogin");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserLogin");
                        });

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Models.TaskEntity", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
